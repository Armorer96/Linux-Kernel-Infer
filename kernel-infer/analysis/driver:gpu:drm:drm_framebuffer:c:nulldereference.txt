Type: NULL_DEREFERENCE
Where: https://elixir.bootlin.com/linux/v4.20-rc3/source/drivers/gpu/drm/drm_framebuffer.c#L195
Code:
	/* check if the format is supported at all */
	info = __drm_format_info(r->pixel_format);
	if (!info) {
		struct drm_format_name_buf format_name;

		DRM_DEBUG_KMS("bad framebuffer format %s\n",
			      drm_get_format_name(r->pixel_format,
						  &format_name));
		return -EINVAL;
	}

	/* now let the driver pick its own format info */
	info = drm_get_format_info(dev, r);

	if (r->width == 0) {
		DRM_DEBUG_KMS("bad framebuffer width %u\n", r->width);
		return -EINVAL;
	}

	if (r->height == 0) {
		DRM_DEBUG_KMS("bad framebuffer height %u\n", r->height);
		return -EINVAL;
	}

	for (i = 0; i < info->num_planes; i++) {


drm_format_info definition:

const struct drm_format_info *
drm_get_format_info(struct drm_device *dev,
		    const struct drm_mode_fb_cmd2 *mode_cmd)
{
	const struct drm_format_info *info = NULL;

	if (dev->mode_config.funcs->get_format_info)
		info = dev->mode_config.funcs->get_format_info(mode_cmd);

	if (!info)
		info = drm_format_info(mode_cmd->pixel_format);

	return info;
}
EXPORT_SYMBOL(drm_get_format_info);


drm_format_info defintion:

const struct drm_format_info *drm_format_info(u32 format)
{
	const struct drm_format_info *info;

	info = __drm_format_info(format);
	WARN_ON(!info);
	return info;
}
EXPORT_SYMBOL(drm_format_info);

drm_format_info definition:

const struct drm_format_info *__drm_format_info(u32 format)
{
	static const struct drm_format_info formats[] = {
	};

	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(formats); ++i) {
		if (formats[i].format == format)
			return &formats[i];
	}

	return NULL;
}

^ can return null.
Commit ID: TODO
Category: Bug
Explanation: info assigned from __drm_format_info is checke for null before dereferencing.
Definition of drm_format_info can return null, before the for loop info should be null
checked.
Patch: In process
