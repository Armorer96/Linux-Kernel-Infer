Type: DEAD_STORE
Where: https://elixir.bootlin.com/linux/v4.20-rc3/source/drivers/net/ethernet/intel/e1000e/nvm.c#L125
Code:
	u32 attempts = 100000;
	u32 i, reg = 0;

	for (i = 0; i < attempts; i++) {
		if (ee_reg == E1000_NVM_POLL_READ)
			reg = er32(EERD);
		else
			reg = er32(EEWR);

		if (reg & E1000_NVM_RW_REG_DONE)
			return 0;

		udelay(5);
	}

	return -E1000_ERR_NVM;
Commit ID: TODO
Category: FP
Explanation: if ref holds a true value and E1000_NVM_RW_REG_DONE is set than the function
returns 0.
Patch: No

-------------------------------------------------------------------------------------

Type: DEAD_STORE
Where: https://elixir.bootlin.com/linux/v5.0-rc8/source/drivers/net/ethernet/intel/e1000e/nvm.c#L294
Code:
	struct e1000_nvm_info *nvm = &hw->nvm;
	u32 i, eerd = 0;
	s32 ret_val = 0;

	/* A check for invalid values:  offset too large, too many words,
	 * too many words for the offset, and not enough words.
	 */
	if ((offset >= nvm->word_size) || (words > (nvm->word_size - offset)) ||
	    (words == 0)) {
		e_dbg("nvm parameter(s) out of bounds\n");
		return -E1000_ERR_NVM;
	}

	for (i = 0; i < words; i++) {
		eerd = ((offset + i) << E1000_NVM_RW_ADDR_SHIFT) +
		    E1000_NVM_RW_REG_START;


Commit ID: TODO
Category: FP
Explanation: eerd is storing the offset after the shift
Patch: No
