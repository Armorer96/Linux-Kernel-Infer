Type: NULL_DEREFERENCE
Where: https://elixir.bootlin.com/linux/v4.20-rc3/source/net/sched/sch_mq.c#L216
Code:
static struct Qdisc *mq_leaf(struct Qdisc *sch, unsigned long cl)
{
	struct netdev_queue *dev_queue = mq_queue_get(sch, cl);

	return dev_queue->qdisc_sleeping;
}

mq_queue_get definition:

	struct net_device *dev = qdisc_dev(sch);
	unsigned long ntx = cl - 1;

	if (ntx >= dev->num_tx_queues)
		return NULL;
	return netdev_get_tx_queue(dev, ntx);

Commit ID: TODO
Category: Bug
Explanation: mq_queue_get can return null, dev_queue needs to be null checked before
dereferencing.
Patch: In process

----------------

Type: NULL_DEREFERENCE
Where: https://elixir.bootlin.com/linux/v4.20-rc3/source/net/sched/sch_mq.c#L235
Code:
static int mq_dump_class(struct Qdisc *sch, unsigned long cl,
			 struct sk_buff *skb, struct tcmsg *tcm)
{
	struct netdev_queue *dev_queue = mq_queue_get(sch, cl);

	tcm->tcm_parent = TC_H_ROOT;
	tcm->tcm_handle |= TC_H_MIN(cl);
	tcm->tcm_info = dev_queue->qdisc_sleeping->handle;
	return 0;
}

mq_queue_get defintion:
static struct netdev_queue *mq_queue_get(struct Qdisc *sch, unsigned long cl)
{
	struct net_device *dev = qdisc_dev(sch);
	unsigned long ntx = cl - 1;

	if (ntx >= dev->num_tx_queues)
		return NULL;
	return netdev_get_tx_queue(dev, ntx);
}

Commit ID: TODO
Category: Bug
Explanation: mq_queue_get can return null if ntx is greater than number of tx queues,
dev_queue should be checked for null before dereferencing.
Patch: In process

---------------------

Type: NULL_DEREFERENCE
Where: https://elixir.bootlin.com/linux/v4.20-rc3/source/net/sched/sch_mq.c#L244
Code:
static int mq_dump_class_stats(struct Qdisc *sch, unsigned long cl,
			       struct gnet_dump *d)
{
	struct netdev_queue *dev_queue = mq_queue_get(sch, cl);

	sch = dev_queue->qdisc_sleeping;
	if (gnet_stats_copy_basic(&sch->running, d, NULL, &sch->bstats) < 0 ||
	    gnet_stats_copy_queue(d, NULL, &sch->qstats, sch->q.qlen) < 0)
		return -1;
	return 0;
}

mq_queue_get function definition:

static struct netdev_queue *mq_queue_get(struct Qdisc *sch, unsigned long cl)
{
	struct net_device *dev = qdisc_dev(sch);
	unsigned long ntx = cl - 1;

	if (ntx >= dev->num_tx_queues)
		return NULL;
	return netdev_get_tx_queue(dev, ntx);
}
Commit ID: TODO
Category: Bug
Explanation: mq_queue_get can return, dev_queue should be null checked before dereferencing.
Patch: In process

---------------------
 Type: NULL_DEREFERENCE
Where: https://elixir.bootlin.com/linux/v4.20-rc3/source/net/sched/sch_mq.c#L244
Code:
static int mq_dump_class_stats(struct Qdisc *sch, unsigned long cl,
			       struct gnet_dump *d)
{
	struct netdev_queue *dev_queue = mq_queue_get(sch, cl);
 	sch = dev_queue->qdisc_sleeping;
	if (gnet_stats_copy_basic(&sch->running, d, NULL, &sch->bstats) < 0 ||
	    gnet_stats_copy_queue(d, NULL, &sch->qstats, sch->q.qlen) < 0)
		return -1;
	return 0;
}
 mq_queue_get function definition:
 static struct netdev_queue *mq_queue_get(struct Qdisc *sch, unsigned long cl)
{
	struct net_device *dev = qdisc_dev(sch);
	unsigned long ntx = cl - 1;
 	if (ntx >= dev->num_tx_queues)
		return NULL;
	return netdev_get_tx_queue(dev, ntx);
}
Commit ID: TODO
Category: Bug
Explanation: mq_queue_get can return, dev_queue should be null checked before dereferencing.
Patch: In process
